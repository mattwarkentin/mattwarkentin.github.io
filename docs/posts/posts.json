[
  {
    "path": "posts/2020-11-12-targets-demo/",
    "title": "Reproducible and scalable data analysis workflows with targets",
    "description": "Dynamic Function-Oriented Make-Like Declarative Pipelines for R.",
    "author": [
      {
        "name": "Matt Warkentin",
        "url": "https://mattwarkentin.github.io/"
      }
    ],
    "date": "2020-11-12",
    "categories": [
      "presentation",
      "targets"
    ],
    "contents": "\nR-centric project workflows\nWriting good code is hard, and coordinating all of the code, data, and outputs for a project to ensure accurate and reproducible results is even harder. In theory, we should be able to return to a project years later and it should “just work”. Often this isn’t true even if we return to the project weeks or months later.\nI was late to adopt drake for managing my R-based projects. For those of you that aren’t familiar, drake is a mature R package that offers functionality like GNU make or snakemake, but is specifically geared towards projects heavily using R.\n\nFor projects in R, the drake package can help. It analyzes your workflow, skips steps with up-to-date results, and orchestrates the rest with optional distributed computing. At the end, drake provides evidence that your results match the underlying code and data, which increases your ability to trust your research.\n\nAdopting drake really changed the way I thought about how to develop and structure my R projects moving forward. However, shortly after finding drake, I stumbled upon its heir apparent, the freshly public targets package, which was under rapid development and aimed to use lessons learned from drake to create an API that was more consistent, friendly, and extensible than its predecessor.\n\nThe targets package is a Make-like pipeline toolkit for Statistics and data science in R. With targets, you can maintain a reproducible workflow without repeating yourself. targets learns how your pipeline fits together, skips costly runtime for tasks that are already up to date, runs only the necessary computation, supports implicit parallel computing, abstracts files as R objects, and shows tangible evidence that the results match the underlying code and data.\n\nI was a very early adopter of targets, and in some small way helped to push its development forward by helping its best-in-class author, Will Landau, work through bugs and consider new features 1. As of writing this post, targets is undergoing review by ROpenSci, and is working towards a CRAN release in the not-so-distant future.\nAfter mentioning drake, and then targets, in many many lab meetings, I was asked to present on the topic to demonstrate how I have been using these packages for my current work. The slide deck below was used for this internal presentation, but I thought I would make the slides publicly available in case others may find it useful.\nSlide deck\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\n\nI am listed as a formal contributor to targets, which also precluded me from accepting the opportunity to review the package for ROpenSci↩︎\n",
    "preview": "https://raw.githubusercontent.com/mattwarkentin/targets-demo/master/docs/share-card.png",
    "last_modified": "2021-01-06T13:45:34-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-10-31-html-presentations/",
    "title": "HTML Presentations or: How I Learned to Stop Worrying and Love the Web",
    "description": "Building impressive presentations with modern web technologies",
    "author": [
      {
        "name": "Matt Warkentin",
        "url": "https://mattwarkentin.github.io/"
      }
    ],
    "date": "2020-10-31",
    "categories": [
      "presentation",
      "xaringan",
      "xaringanExtra"
    ],
    "contents": "\nHTML Presentations\nMoving to an R Markdown based workflow was a game changer for me. Before that, I was stuck in the world of Microsoft Office like most others. Quickly, I began to adopt an R markdown approach for more and more of my day-to-day tasks. It started with simple static documents, but would quickly grow into using R Markdown for nearly everything, including presentations, websites, and much more.\nI began using R Markdown for presentations by going the LaTeX route and making Beamer PDF presentations1. This was a significant improvement upon PowerPoint, and made things a lot better with respect to version-control, reproducibility, and easy integration of code and output along with traditional presentation content.\nShortly after making the switch to R Markdown for creating presentations, I became aware of xaringan, which offered all of the same benefits as Beamer, but since the presentation format was HTML, it also opened up the entire world of web technologies to create dynamic presentation content. The combination of xaringan, xaringanthemer, and xaringanExtra have revolutionized the way I make presentations - and I will never go back.\nSlide deck\nThe slide deck below was prepared for an internal presentation to members of my lab. I had preached the gospel of HTML presentations and xaringan long enough that it made good sense to formalize my comments in this presentation. Hopefully others may find these slides helpful in making the transition to HTML presentations.\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\n\nBeamer presentations had been around for a long time in the math world, but at the time I didn’t know anything about LaTeX or Beamer, so I did not begin making Beamer presentations until I discovered R Markdown↩︎\n",
    "preview": "https://raw.githubusercontent.com/mattwarkentin/html-presentations-or-hiltswaltw/master/docs/share-card.png",
    "last_modified": "2021-01-06T13:45:29-05:00",
    "input_file": {}
  }
]
